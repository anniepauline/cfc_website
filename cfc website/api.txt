lazy load components:

const Home = lazy(()=>import('./Home'))
const About= lazy(()=>import('./About'))

<Suspense fallback = {<div>please wait...</div>} >
<Home/>
<About/>
</Suspense>

fetch api data using async/ await:

import {useState,useEffect} from "reaact"

const URL = "some url";

function App()
{
const [temp.setTemp] = useState(0);

const result = await fetch(URL)
result.json().then(json=>{
setTemp(json.curent.temp_f);
})
}


---------------------------------------------------------------------------------
useBooksSearch
------------------------
import {useEffect, useState} from 'react';
import axios from "axios"

export default function useBookSearch(query, pageNumber) {
  
    const [loading,setLoading] = useState(true);
    const [books,setBooks] = useState([]);
    const [hasMore,setHasMore] = useState(false);
    const [error,setError] = useState(false);

    

  useEffect(()=>{
    setBooks([])
  },[query])

  useEffect(()=>{
    setLoading(false);
    setError(false);
    let cancel;

    axios({
      method: "GET",
      url : "http://openlibrary.org/search.json",
      params:{q:query, page:pageNumber},
      cancelToken : new axios.CancelToken(c => cancel = c)
    })
    .then(res=>{
      console.log(res.data)
      setBooks((prevBooks)=> {
        return  [...new Set([...prevBooks, ...res.data.docs.map(b=>b.title)])] 
    })
    setHasMore(res.data.docs.length > 0)
    setLoading(false) })
    .catch(e=>{
      if(axios.isCancel(e )) return 
        setError(true)
    })
    return ()=>cancel()
  },[query,pageNumber])
   
  return {loading,books,hasMore,error};
}

------------------------------------------------------------------------------------------
App.js
------------------------
import {useState, useRef, useCallback} from "react";
import useBookSearch from "./useBookSearch";



export default function App() {
  const [query,setQuery] = useState("");
  const [pageNumber,setPageNumber] = useState(1)
  const {loading,books,hasMore,error} = useBookSearch(query,pageNumber)

  const observer = useRef()
  const lastBookElementRef = useCallback(node =>{
    if(loading) return 
    if(observer.current) observer.current.disconnect()
    observer.current = new IntersectionObserver(entries=>{
      if(entries[0].isIntersecting && hasMore) {
        setPageNumber(prevPageNumber=>prevPageNumber+1)
        console.log("visible")
      } 
    })
    if(node) observer.current.observe(node)
    console.log(node)
  },[loading,hasMore])

  function handleSearch(e)
  {
    setQuery(e.target.value)
    setPageNumber(1)
  }

  return (
   <>
    <input type = "text" value = {query} onChange={handleSearch}></input>
    {books.map((book,index)=>{
      if(books.length === index + 1)
        return <div ref = {lastBookElementRef} key = {book}>{book} </div>
      else
      return <div key = {book}>{book} </div>
    })}
   
    <div>{loading && "loading..."}</div>
    <p>{error && "Error..." }</p>

   </>
  );
}


============================================================================================
App.js
===============
import {useState, useRef, useCallback} from "react";
import useBookSearch from "./useBookSearch";



export default function App() {
  const [query,setQuery] = useState("");
  const [pageNumber,setPageNumber] = useState(1)
  const {loading,books,hasMore,error} = useBookSearch(query,pageNumber)

  const observer = useRef()
  const lastBookElementRef = useCallback(node =>{
    if(loading) return 
    if(observer.current) observer.current.disconnect()
    observer.current = new IntersectionObserver(entries=>{
      if(entries[0].isIntersecting && hasMore) {
        setPageNumber(prevPageNumber=>prevPageNumber+1)
        console.log("visible")
        console.log(pageNumber);
      } 
    })
    if(node) observer.current.observe(node)
    console.log(node)
  },[loading,hasMore])

  function handleSearch(e)
  {
    setQuery(e.target.value)
    
  }

  return (
   <>
    <input type = "text" value = {query} onChange={handleSearch}></input>
    {books.map((book,index)=>{
      if(books.length === index + 1)
        return <div ref = {lastBookElementRef} key = {book}>{book} </div>
      else
      return <div key = {book}>{book} </div>
    })}
   
    <div>{loading && "loading..."}</div>
    <p>{error && "Error..." }</p>

   </>
  );
}


==========================================================================================
useBokkSearch
===========================
import {useEffect, useState} from 'react';
import axios from "axios"

export default function useBookSearch(query, pageNumber) {
  
    const [loading,setLoading] = useState(true);
    const [books,setBooks] = useState([]);
    const [hasMore,setHasMore] = useState(false);
    const [error,setError] = useState(false);



  useEffect(()=>{
    setBooks([])
  },[query])

  useEffect(()=>{
    setLoading(false);
    setError(false);
    let cancel;

    axios({
      method: "GET",
      url : "https://cfc-study-app.adlaiapp.com/apis/qas/",
      
        headers: {
          'content-type':'application/vnd.api+json',
          'Authorization' : process.env.REACT_APP_APIKEY,
        },
      params:{search:query, page:pageNumber},
      cancelToken : new axios.CancelToken(c => cancel = c)
    })
    .then(res=>{
      console.log(res.data)
      setBooks((prevBooks)=> {
        return  [...new Set([...prevBooks, ...res.data.data.map(b=>b.attributes.title)])] 
    })
    setHasMore(res.data.data.length > 0)
    setLoading(false) })
    .catch(e=>{
      if(axios.isCancel(e )) return 
        setError(true)
    })
    return ()=>cancel()
  },[query,pageNumber])
   
  return {loading,books,hasMore,error};
}

================================================================


